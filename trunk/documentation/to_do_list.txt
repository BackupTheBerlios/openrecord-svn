================================================================
To-do list -- OpenRecord dev tasks
================================================================
 Copyright rights relinquished under the Creative Commons  
 Public Domain Dedication:
    http://creativecommons.org/licenses/publicdomain/
----------------------------------------------------------------


----------------------------------------------------------------
WHAT IS THIS FILE?

This is a list of all the work we have ahead of us.  A history
of completed tasks is in the file to_do_history.txt.

HOW DO I USE THIS?

If you think of a new task, add it to the bottom of the list.  
Or add it somewhere in the middle of the list, if that makes
more sense.

Before you start working on a task, do four things: 
 (1) add the task to the list, if it's not already there
 (2) put your name to the "Who" column of the task, so 
     that other people know you're working on it
 (3) if you feel like it, put an estimate for how long
     you think the task will take
 (4) check this file back into SVN, so that other people
     can see your changes
     
When you are done working on a task:
 (1) put something in the "Actual" column -- you can just
     put "done", or you can put the number of IEDs you
     spent working on the task, if you know

Key:
  IED == an "ideal engineering day", with just coding, and no distractions
----------------------------------------------------------------
  


---------------------------------------------------------------------------
Tasks toward having a stable API for developers
-------+----------+---------+----------------------------------------------
Who    | Estimate | Actual  | Task
-------+----------+---------+----------------------------------------------
       |          |         | 101. Document the Data model public API
       |          |         | 102. Make the 4 original plugins conform to the new plugin API (if possible)
       |          |         | 103. See if it's possible to simplify the plugin API
       |          |         | 104. Change "TablePlugin" to "TableView", etc.
       |          |         | 105. Move the 4 original plugins into the plugins folder
       |          |         | 106. Remove BarChartView and Outline view from the axiomatic.json file
       |          |         | 107. Have Entry.toString() return the Entry's UUID -- same for Item.toString()
       |          |         | 108. Move DOM methods from orp.view.View.xxx to orp.dom.xxx
       |          |         | 109. Make RootView subclass from View, or add comments explaining why it doesn't
       |          |         | 110. Rationalize the View API and document public API
       |          |         | 111. Refactor our observer notification API (and implementation)
(soon) |          |         | 112. Try using Ant and the Dojo build system to build OpenRecord into a single-file 
       |          |         | 113. BUG: in plugins, dojo.require() statements don't do anything 
       |          |         | 114. In OpenRecordLoader.js, add: djConfig.cacheBust = new Date().valueOf().toString();
       |          |         | 115. Allow a plugin view to register as a default detail view for a category of item
       |          |         | 116. Have DetailPlugin show tabs, if more than one detail view is available for an item
       |          |         | 117. (new task...)
-------+----------+---------+----------------------------------------------


---------------------------------------------------------------------------
Tasks toward having a stable file format
-------+----------+---------+----------------------------------------------
Who    | Estimate | Actual  | Task
-------+----------+---------+----------------------------------------------
(soon) |          |         | 201. Research standard text representations for DateValues
(soon) |          |         | 202. Make a DateRange data class, for values like "July 2002 - May 2003"
(soon) |          |         | 203. Make ordinal value strings not grow long so quickly
       |          |         | 204. Make sure view code uses transactions
       |          |         | 205. Write concurrency tests 
       |          |         | 206. Ensure that PHP scripts and file I/O works for concurrent multi-user access
       |          |         | 207. (new task...)
-------+----------+---------+----------------------------------------------


---------------------------------------------------------------------------
Big picture tasks
-------+----------+---------+----------------------------------------------
Who    | Estimate | Actual  | Task
-------+----------+---------+----------------------------------------------
mignon |          |  .25    | 301. Instead of having a copy of dojo in our SVN archive, link to dojo using SVN "externals"
       |          |         | 302. Attempt to embed an OpenRecord view in a MediaWiki page
(soon) |          |         | 303. Have a server that supports repositories with thousands of items
(soon) |          |         | 304. Change View class so a subview can be either an orp.view.View or a dojo.widget instance
(soon) |          |         | 305. Look at replacing our notion of Views with Dojo's notion of widgets
       |          |         | 306. Run in IE as well as Firefox
       |          |         | 307. Add support for repository merging
brian  | 3    IED |         | 308. Use Camtesia Studio to create screencasts about OpenRecord (and plugins)
       |          |         | 309. Consider implementing a JavaScript file:// version of this: http://lists.berlios.de/pipermail/openrecord-dev/2005-October/000248.html
       |          |         | 310. (new task...)
-------+----------+---------+----------------------------------------------


---------------------------------------------------------------------------
Tasks toward cleaning up the code base
-------+----------+---------+----------------------------------------------
Who    | Estimate | Actual  | Task
-------+----------+---------+----------------------------------------------
       |          |         | 401. try to replace View.appendNewElement() with dojo.xml.domUtil methods
       |          |         | 402. try to replace orp.util.css_xxx functions with dojo.xml.htmlUtil.xxxClass functions
       |          |         | 404. try to replace /source/util/Cookie.js with dojo.io.cookies
       |          |         | 405. try to replace remaining Util.js functions with dojo.lang functions
       |          |         | 406. Make DateValue wrap an internal Date object
       |          |         | 407. merge StubArchive + DeltaArchive, and re-name the result
       |          |         | 408. update unit tests to use the FakeStorage instead of StubArchive
       |          |         | 409. Pick one file, and do a group code review on it
brian  | 1    IED |         | 410. Rationalize our CSS style sheet approach
       |          |         | 411. Do refactoring wherever needed (e.g. SuggestionBox and AttributeSuggestionBox)
       |          |         | 412. Write one unit test that tests GUI code
       |          |         | 413. Write one performance test that measures the time some code takes
       |          |         | 414. Convert UI code from DOM level 0 to DOM level 2
       |          |         | 415. Start process for doing ongoing code reviews
       |          |         | 416. grep for ".getEntriesForAttribute(" and refactor to use ".getValuesForAttribute("
       |          |         | 417. Maybe change all our indenting from spaces to tabs, to be in sync with dojo
       |          |         | 418. Prevent memory leaks via dojo.event.browser.clean(parent.removeChild(child));
mignon |          |         | 419. Replace scriptaculous/dragdrop.js with dojo.dnd, and remove scriptaculous from our tree
       |          |         | 420. Replace XMLHttpRequest calls with dojo.io.bind() calls
       |          |         | 421. Consider refactoring orp.storage so that FileProtocolStorage is "behind" dojo.io.bind
       |          |         | 422. (new task...)
-------+----------+---------+----------------------------------------------


---------------------------------------------------------------------------
Tasks to make the UI usable
-------+----------+---------+----------------------------------------------
Who    | Estimate | Actual  | Task
-------+----------+---------+----------------------------------------------
       |          |         | 510. Implement a good URL-to-content mapping, so that URLs won't go bad in future releases
       |          |         | 511. Assign system attributes & categories to a "System" category
       |          |         | 512. Hide "System" items most of the time
       |          |         | 513. improve UI for creating a new category
       |          |         | 514. Deal with \n in page name or summary fields
       |          |         | 515. be able to select a table row 
       |          |         | 516. be able to delete a selected table row 
       |          |         | 517. drag-and-drop to re-order table rows
       |          |         | 518. improve UI for "add new attribute" in Table View 
       |          |         | 519. improve UI for setting the expected data type of an attribute
-------+----------+---------+----------------------------------------------
       |          |         | 520. have Detail View use textarea instead of text input, for long strings
       |          |         | 521. make it possible to add a new attribute in Detail View 
       |          |         | 522. improve UI for initial "out of the box" experience
       |          |         | 523. improve UI for creating a new page
       |          |         | 524. improve UI for adding a new section to a page
       |          |         | 525. UI to move/delete sections?
       |          |         | 526. improve UI for creating a new user
       |          |         | 527. Have different documents use different style-sheets
       |          |         | 528. Wire up observers & keep views in sync
       |          |         | 529. Provide GUI feedback about what's editable
-------+----------+---------+----------------------------------------------
(soon) |          |         | 530. Data model: boolean, URL, entries that apply to timespan (e.g. annual population)
       |          |         | 531. Make currently sorted column have a special CSS class so that it can look different
       |          |         | 532. Resolve: How should table cells deal with <enter>, move down a cell or to the right?
       |          |         | 533. be able to select a non-lozenge literal entry
       |          |         | 534. be able to select the text within an entry
       |          |         | 535. Reach consensus on (colors, padding, and borders) and then implement
       |          |         | 536. Set up an OpenRecord.org "dogfood" site & hand-copy info into it
       |          |         | 537. UI and data model design to support collaboration
       |          |         | 538. config option so that only logged-in users have read-access
       |          |         | 539. have an "icon" attribute, and use icons in suggestion box and in EntryView
-------+----------+---------+----------------------------------------------
       |          |         | 540. improve UI for entering references to categories or to other items
       |          |         | 541. BUG: back button is broken
       |          |         | 542. BUG: "Waiting for localhost..." (may be related to how we load images)
       |          |         | 543. BUG: "Node was not found" exception in EntryView/LoginView?
       |          |         | 544. Do some testing to find other existing bugs
       |          |         | 545. Have explicit save instead of (or in addition to) autosave
       |          |         | 546. Be able to cancel out of creating a new account
       |          |         | 547. Save view layout choice and user preferences
       |          |         | 548. Write scalability tests 
       |          |         | 549. Fix the message that says "Sorry, for some reason OpenRecord was not able to launch."
       |          |         | 550. use dojo.fx.html transitions fadeOut/fadeIn or implode/explode for page changes
       |          |         | 551. Make a Quantity class, for representing values like "18 kg"
       |          |         | 552. (new task...)
-------+----------+---------+----------------------------------------------
                            

---------------------------------------------------------------------------
Plugins to write -- see also: .../source/plugins/create_new_plugin/plugin_suggestions.html
-------+----------+---------+----------------------------------------------
Who    | Estimate | Actual  | Task
-------+----------+---------+----------------------------------------------
       |          |         | 601. pivot table (Brian Skinner has starter code available.)
       |          |         | 602. periodic table element -- could make use of features 115 and 116
       |          |         | 603. scatter plot -- (using dojo.widget.Chart, fallback to html ?)
       |          |         | 604. bar chart -- (using dojo.widget.Chart, fallback to html ?)
       |          |         | 605. Gantt chart -- (using dojo.widget.Chart, fallback to html ?)
       |          |         | 606. some animated view -- e.g. http://weblog.infoworld.com/udell/2005/01/22.html#a1156
       |          |         | 607. timeline -- like Wikimedia EasyTimeline: http://meta.wikimedia.org/wiki/EasyTimeline
       |          |         | 608. calendar -- month view, etc. -- with items placed based on date attributes
-------+----------+---------+----------------------------------------------

  
  
=======================================================
More tasks
=======================================================
---------------------------------------------------
 + BUG: Back button is broken
    The browser's back button doesn't work after you click from 
    page to page in the navbar.
---------------------------------------------------
 + List/Detail Combo Plugin
    We could make a plugin that takes a list of items and
    displays them in a format like what you see in a mail
    reader or a news reader.  So you'd have some sort of
    table-view on top, with one item per row, and then a
    detail view below, to show more info about a single
    item.  We could copy a lot of code from the current
    TablePlugin.js and DetailPlugin.js, so it shouldn't be
    too hard to make a simple read-only version.
---------------------------------------------------
 + Table Plugin with ad-hoc attributes
    We should change the TablePlugin.js so that the user is
    able to add new columns on the fly, where each new
    column is for some new ad-hoc attribute.
---------------------------------------------------
 + Be able to edit in outline mode
    In the outline plugin, add code to handle editing. The
    user should be able to add new items to an outline,
    chagne existing items, indent existing items, etc.
---------------------------------------------------
 + Have Table plugin group by category
    Make the Table plugin be about to to show groupings by
    category. For example, in a table that shows a list of
    cities, you might want to see them grouped by country.
---------------------------------------------------
 + Have Outline plugin group by category
    Make the Outline plugin be able to show groupings by
    category. For example, in an outline that shows a list of
    cities, you might want to see them grouped by country.
---------------------------------------------------
 + In Outline plugin, show detail locally
    When you click on the "more" link in an outline, the
    detail information should show up on the current page,
    within the current list item, rather than whisking you
    away to a completely separate item detail page.
---------------------------------------------------
 + Move this task list from here into OpenRecord!
---------------------------------------------------
 + Consider having a build system
    A build system could:
      * run unit tests
      * run JSLint on the code
      * compress the code by removing white space and comments
      * compress the code by copying everything into a single file
      * generate documentation
      * remove Util.assert() statements from the code
---------------------------------------------------
 + Skins/Themes/Chrome
    Make it possible for different web sites to each of their own
    logos, color-schemes, and branding.
---------------------------------------------------
 + search engine indexing
    Figure out how to make sure that search engines like
    Google are able to index all the "virtual" pages that 
    OpenRecord serves.
    I don't know just what's involved in making sure the search
    engines can index a page.  That's something I'll have to
    learn more about.  If I had to guess, I think we're going to
    have to do two thing: (1) make each page have it's own real
    URL, rather than using the #anchor tag scheme that
    OpenRecord is using now, and (2) have the server generate
    html pages that have all the content elements already in
    place, rather than relying on client JavaScript to do all
    the work.
---------------------------------------------------
 + Rationalize CSS style sheets
    Need to figure out a consistent "style" for using style sheets applicable
    to the way we architect our view widgets
---------------------------------------------------
 + Need to rationalize View api and document public api
    - wire up superview/subview after creation of subview
    - get rid of display()
    - rename refersh()
    - settle on standard constructor parameters
 Q: Should getListofContentItems() in superview be replaced by an argument into plugin's constructor
   Also, should plugin get a CSS class?
 Q: Should we decouple plugins from SectionView? in general, should we make objects less tightly coupled?
     Parent objects can know about children objects, but not vice versa.
---------------------------------------------------
 + UI design/improvement for:
    - toggle for "edit"/"view" or "editable"/"locked"
    - adding a row to a table
    - deleting a row from a table
    - dragging rows up and down to re-order (conflict with sort columns?)
    - adding an entry to a table cell
    - replacing an entry with new text
    - adding a new column to a table
    - creating a new attribute
    - setting the expected data type of an attribute
    - doing data type validation on a new entry
    - adding a cell entry which is a reference to another item
    - creating a new category & putting things in categories
    - creating a new user account for yourself
    - logging in and logging out
    - creating a new page
    - creating a new section on a page
    - editing the query for a section
    - GUI feedback to show what text is editable?
---------------------------------------------------
 + talk about different designs for:
    - doing authentication (e.g. where to store passwords?)
    - representing queries (hold query matching criteria in normal attributes?)
    - ad-hoc queries as well as persistant queries?
    - bi-directional references as a type of entry?
---------------------------------------------------
 + Bug: "Waiting for localhost..."
    Load the demo_page.html page from http://localhost:...
    Go into Edit mode and change some entry.  The Firefox status 
    bar (bottom left) sometimes gets stuck saying 
    "Waiting for localhost...", even though it doesn't seem to
    be waiting
---------------------------------------------------
 + Bug: "Node was not found" exception
    Load the demo_page.html page from file:///...
    Go into Edit mode and change some entry.  
    You get an exception in EntryView.js:
      Util.handleError()
      uncaught exception: [Exception... "Node was not found"  
      code: "8" nsresult: "0x80530008 (NS_ERROR_DOM_NOT_FOUND_ERR)"  
      location: "file:///K:/www/htdocs/openrecord/demo/current/trunk/source/EntryView.js Line: 221"]
      line: 0
    
===========================       
Open Issues
===========================       
 + How should we interoperate with other repositories(openrecord + other sources of data)?
 + Should we rename "World"?
 + Q: Do we (and how) need a concept of focus for Views? Currently, only Text input 
    and Textarea gets keyboard focus. We need it for table selections and possibly 
    selecting "lozenges" (item references stored in the EntryView)