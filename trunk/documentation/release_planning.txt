================================================================
Release Planning
   for release 0.1 of OpenRecord
================================================================
 Copyright rights relinquished under the Creative Commons  
 Public Domain Dedication:
    http://creativecommons.org/licenses/publicdomain/
----------------------------------------------------------------
    
    

===================================================
Iterations
===================================================
Three iterations that last 1-month each?
  1. May iteration
  2. June iteration
  3. July iteration
  
Release 0.1 at the start of August?




=======================================================
"User Stories" we want to include in release 0.1
=======================================================
 + A user can see a list of user stories, sorted by the "priority" attribute.
 + A user can see a list of tasks planned for an iteration
 + A user can see a list of tasks finished in an iteration.

 + A user can see a list of all known tasks.
 + A user can see a list of all completed tasks.
 + A user can see a list of the tasks that they have signed up for.
 + A user can see the measured velocity for previous iterations.

 + A user can log into the web site, and log out.
 + A logged-in user can create items to track:
    tasks, stories, bugs, iterations, and releases.
 + A logged-in user can delete items (tasks, stories, bugs, etc.).
 + A logged-in user can edit the attributes of a task, story, bug, etc.
 + A logged-in user can assign a task to a user story.
 + A logged-in user can assign a story to a release.
 + A logged-in user can assign a task to an iteration.
 + A logged-in user can sign up to do a task.
 + A logged-in user can report a bug.
 + A logged-in user can assign a number to the "priority" attribute of a story.
 + Different users can each have their own "priority" attribute; each user can prioritize a story differently.
 
 + The data store is reliable. Users can trust that data won't be lost.
 
 
 
 
=======================================================
"User Stories" we want to defer until after release 0.1
=======================================================
 + A user can see everything that was ever saved.
 + A user can see past versions of an item.
 + We can move all the content on the current "static" openrecord.org 
   site to a new replacement openrecord.org site built using the 
   OpenRecord software.
 + A logged-in user can write up weekly status reports.
 
 
 
################################################################################
################################################################################
##                                                                            ##
##                                Iteration #1                                ##
##                                  May 2005                                  ##
##                                                                            ##
################################################################################
################################################################################
 

=======================================================
Tasks we need to do for the release 0.1 user stories
=======================================================

IED == an "ideal engineering day", with just coding, and no distractions

---------------------------------------------------------------------------
   Tasks we originally identified for release 0.1, back on May 2, 2005
-------+----------+---------+----------------------------------------------
Who    | Priority | Estimate| Task
-------+----------+---------+----------------------------------------------
 Chao  |    done? | 1   IED | UI for adding an attribute to an item
Brian  |    done? |         | UI for setting the expected data type of an attribute
Mignon |    done  | 1   IED | UI for creating a new category
Mignon | High     | 1   IED | UI for deleting a row from a table 
 Chao  |   done   | 1.5 IED | UI for logging in and logging out; cookies and auto-login; display of who you're logged in as
 Chao  |   done   | 0.5 IED | UI to sort a table when you click on a column header (2 ied, needed to refactor TablePlugin to DOM level 2)
Brian  |   done   | 1   IED | Data model: change "Value" to "Entry"; refactor entries to be per-attribute
Brian  |   done   | 2   IED | Convert UI code to use new data model
       | High     |         | UI for entering a number literal (instead of a string literal) in a table
Brian  |    done? |         | UI for entering references to categories or to other items
 Chao  |    done  | 0.5 IED | UI for adding a new section to a page
Mignon |    done? |         | UI for editing the query that a section uses
       | Medium   |         | Verify/fix the bug that happens when you call the PHP server code with no POST data
Brian  |   done   | 0   IED | Replace the Edit/Save button with a Lock/Unlock UI; automatically save changes as they happen
Brian  |   done   | 1   IED | Replace the BigLumpVirtualServer with an DeltaVirtualServer; Change PHP code to append to the data file
       | Low      |         | Convert UI code from DOM level 0 to DOM level 2
       | Low      |         | Write a plugin view that calculates and displays the measured project velocity
Mignon |   done   |         | UI for creating a new page
 Chao  |   done   |         | UI for creating a new user
-------+----------+---------+----------------------------------------------
 

---------------------------------------------------------------------------
   Additional "hidden" tasks that we uncovered during May
-------+----------+---------+----------------------------------------------
Who    | Priority | Estimate| Task
-------+----------+---------+----------------------------------------------
 Chao  |   done   | 0   IED | Re-implement UI for entering a new row in a table (1.5 IED actual)
 Chao  |   done   |         | Refactor TablePlugin to DOM Level 2 (1.5 IED actual)
Brian  |   done   | 1   IED | Ensure that UUIDs are unique in multi-user use case
 Chao  |   done   | 1   IED | Refactor plugin class, pass a query to plugin, create Plugin base class
-------+----------+---------+----------------------------------------------


---------------------------------------------------------------------------
   New tasks that we decided to take on for release 0.1
-------+----------+---------+----------------------------------------------
Who    | Priority | Estimate| Task
-------+----------+---------+----------------------------------------------
Mignon |   done   |         | Generate time-based UUIDs ("version 1" UUIDs)
Chao   |   done   | 1   IED | Allow users to view multiple entries in a table plugin cell (0.5 IED actual)
Chao   |   done   | 2   IED | Allow users to enter/edit multiple entries in a table plugin cell (1 IED actual)
Chao   |   done   |         | Have Escape key undo current editing in active field
Chao   |   done   |         | In table columns where the expected type is a Category, when the user enters text, create a new item with that name and category
-------+----------+---------+----------------------------------------------



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     Summary of Iteration #1
            May 2005
      May 2 to June 6, 2005
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  14    = number of PLANNED tasks that were finished 
   4    = number of HIDDEN tasks that were finished 
   5    = number of ADDITIONAL tasks that were finished 
 ~19   = total estimated IEDs for PLANNED and ADDITIONAL tasks that were finished
   5    = number of weeks in May iteration
 ~ 3.8 = Velocity (in estimated IEDs per week)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 

################################################################################
################################################################################
##                                                                            ##
##                                Iteration #2                                ##
##                                  June 2005                                 ##
##                                                                            ##
################################################################################
################################################################################
 

---------------------------------------------------------------------------
   Tasks we originally identified for Iteration #2, in June 2005
-------+----------+---------+----------------------------------------------
Who    | Estimate | Actual  | Task
-------+----------+---------+----------------------------------------------
brian  | 0.25     | 0.25    |  1. Set up a prototype of the OpenRecord.org "dogfood" site
mignon | 0.25 IED | 0.5 IED |  2. Have identifiedRecord.getUserstamp() get the user from the UUID
mignon | 0.5  IED | 0.5 IED |  3. Switch data model to use time-based UUIDs for timestamps & userstamps
brian  | 0.5  IED | 0.25    |  4. Store transaction info in repository
       |          |         |  5. UI for deleting a row from a table
brian  | 0.5  IED | 0.25    |  6. Save provisional item and then set the category, in that order, and in one transaction
brian  | 0.25 IED | 0.25    |  7. Fix the bug that happens when you call the PHP server code with no POST data
chao   | 0.5  IED | 0.5 IED |  8. UI for entering a number literal (instead of a string literal) in a table [with Brian]
chao   | 1    IED | 1   IED |  9. UI for entering a date literal in a table (and data model support) [with Brian]
brian  | 1    IED | 1   IED | 10. Add data model support for bi-directional references
chao   | 2    IED | 1.5 IED | 11. Move to better persistent representation for queries [with Brian]
       |          |         | 12. Make sure view code uses transactions
       |          |         | 13. Deal with \n in page name or summary fields
       |          |         | 14. BUG: problems with newlines and HTML characters in text strings
brian  | 0.5  IED |         | 15. Set up an OpenRecord.org "dogfood" site & hand-copy info into it
-------+----------+---------+----------------------------------------------


---------------------------------------------------------------------------
 Additional "hidden" tasks we uncovered during Iteration #2, in June 2005
-------+----------+---------+----------------------------------------------
Who    | Estimate | Actual  | Task
-------+----------+---------+----------------------------------------------
brian  |          | 0.5     |     Update the JSON repository file to use time-based UUIDs
brian  |          | 0.25    |     Get deletion votes working again after switching to time-based UUIDs
brian  |          | 0.25    |     Enabled one server to serve N pages running against N repository files
brian  |          | 0.5     |     Convert the code to use bi-directional references
brian  |          | 0.25    |     Convert the axiomatic items to use bi-directional reference
brian  |          | 0.75    |     Misc. other improvements to the repository JSON format
-------+----------+---------+----------------------------------------------


---------------------------------------------------------------------------
   New tasks that we decided to take on for Iteration #2, in June 2005
-------+----------+---------+----------------------------------------------
Who    | Estimate | Actual  | Task
-------+----------+---------+----------------------------------------------
chao   |          | done    | 16. Have text-entries and reference-entries look different
mignon |          | done    | 24. Display Navbar pages in the right order
chao   |          | done    | 25. Arrow keys in SuggestionBox
chao   | 1.5 IED  | done    | 27. Change UI so that non-literal entries are immutable
mignon |          | done    | 30. Have identifiedRecord.getTimestamp() get the time from the UUID 
chao   | 1.5 IED  | 1.5 IED | 39. improve UI for editing the query that a section uses
chao   | 0.5 IED  | 0.5 IED |     Improved UI for autocomplete
chao   | 0.5 IED  | 0.5 IED |     Allow plugins to store layout data
chao   | 0.5 IED  | 0.5 IED |     Table plugin persists column order
brian  |          | 0.5 IED | 48. Add a Query.js class, and/or an Attribute.js class
-------+----------+---------+----------------------------------------------



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     Summary of Iteration #2
            June 2005
     June 6 to July 4, 2005
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  10    = number of PLANNED tasks that were finished 
   6    = number of HIDDEN tasks that were finished 
  10    = number of ADDITIONAL tasks that were finished 
 ~14   = total estimated IEDs for PLANNED and ADDITIONAL tasks that were finished
   4    = number of weeks in June iteration
 ~ 3.5 = Velocity (in estimated IEDs per week)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   

################################################################################
################################################################################
##                                                                            ##
##                                Iteration #3                                ##
##                                  July 2005                                 ##
##                                                                            ##
################################################################################
################################################################################


---------------------------------------------------------------------------
   Tasks we originally identified for Iteration #3, in July 2005
-------+----------+---------+----------------------------------------------
Who    | Estimate | Actual  | Task
-------+----------+---------+----------------------------------------------
brian  | 0        | 0       |  1. Change "Edit"/"Done Editing" button to "Show Tools"/"Hide Tools"
brian  | 0.25 IED | 0.25    |  2. Allow editing for any logged in user, even if edit tools aren't shown
       |          |         |  3. Assign system attributes & categories to a "System" category
       |          |         |  4. Hide "System" items most of the time
       |          |         |  5. Attempt to embed an OpenRecord view in a MediaWiki page
       |          |         |  6. Refactor our observer notification API (and implementation)
chao   | 0.5  IED |         |  7. Wire up observers & keep views in sync
       |          |         |  8. be able to select a lozenge 
       |          |         |  9. be able to select a table row 
       |          |         | 10. be able to select a non-lozenge literal entry
       |          |         | 11. be able to select the text within an entry
       |          |         | 12. be able to delete a selected lozenge 
       |          |         | 13. be able to delete a selected table row 
chao   | 0.5  IED |         | 14. improve keyboard navigation: tab, arrow, and return keys
       |          |         | 15. Get data model to pass the ordinal unit tests again
       |          |         | 16. drag-and-drop lozenges
       |          |         | 17. drag-and-drop to re-order navbar menu items
       |          |         | 18. drag-and-drop to re-order table rows
       |          |         | 19. drag-and-drop to re-order table columns
       |          |         | 20. improve UI for "add new attribute" in Table View 
       |          |         | 21. Rationalize our CSS style sheets
       |          |         | 22. Reach consensus on (colors, padding, and borders) and then implement
       |          |         | 23. Make sure view code uses transactions
       |          |         | 24. Deal with \n in page name or summary fields
       |          |         | 25. BUG: need to encode reserved characters(<&>\n"') back at client-server layer
-------+----------+---------+----------------------------------------------
       |          |         | 26. Set up an OpenRecord.org "dogfood" site & hand-copy info into it
       |          |         | 27. Write one unit test that tests GUI code
       |          |         | 28. Write one performance test that measures the time some code takes
       |          |         | 29. Pick one file, and do a group code review on it
       |          |         | 30. Provide GUI feedback about what's editable
       |          |         | 31. Implement a good URL-to-content mapping, such that URLs won't go bad in future releases
       |          |         | 32. Convert UI code from DOM level 0 to DOM level 2
       |          |         | 33. Rationalize the View api and document public api
       |          |         | 34. Document the Data model public api
       |          |         | 35. Add support for saving content when used from a file:// URL
       |          |         | 36. Do refactoring wherever needed (e.g. SuggestionBox and AttributeSuggestionBox)
       |          |         | 37. improve UI for setting the expected data type of an attribute
       |          |         | 38. improve UI for creating a new category
       |          |         | 39. improve UI for entering references to categories or to other items
       |          |         | 40. improve UI for creating a new page
       |          |         | 41. improve UI for adding a new section to a page
       |          |         | 42. improve UI for creating a new user
       |          |         | 43. Check for incorrect dependencies (e.g. a Util dependency on model code)
       |          |         | 44. Create directories "view" and "plugin"
-------+----------+---------+----------------------------------------------
       |          |         | 45. Add support for repository merging
       |          |         | 46. BUG: back button is broken
       |          |         | 47. BUG: "Waiting for localhost..."
       |          |         | 48. BUG: "Node was not found" exception in EntryView/LoginView?
       |          |         | 49. Do some testing to find other existing bugs
       |          |         | 50. Have explicit save instead of (or in addition to) autosave
       |          |         | 51. Be able to cancel out of creating a new account
       |          |         | 52. Save view layout choice and user preferences
       |          |         | 53. Do code reviews
       |          |         | 54. Write concurrency tests 
       |          |         | 55. Write scalability tests 
       |          |         | 56. Ensure that PHP scripts and file I/O works for concurrent multi-user access
-------+----------+---------+----------------------------------------------
       


=======================================================
Categories and Attributes we might use for release 0.1
=======================================================
(*) == reference to another item

User Story
  name
  summary
  priority
  release this story is assigned to (*)
  
Iteration
  name
  date completed
  tasks we plan to do in this iteration (*)
  release (*)
  
Release
  name
  date completed
  iterations leading up to this release (*)
  user stories assigned to this release (*)
  
User
  name
  tasks this person is signed-up for (*)
  
Task
  name
  summary
  user story (or category) this task falls into (*)
  person who has signed-up to do this task (*)
  estimate of how long this task will take
  iteration in which we plan to do this task (*)
  iteration in which this task was started (*)
  iteration in which this task was finished (*)
  status text
  
Bug
  name
  summary
  (most Bug items will also be categorized as Task items, so each Bug will also have all the attributes of a Task)
  

   
  
=======================================================
Tasks we want to defer until after release 0.1
=======================================================
---------------------------------------------------
 + Figure out how to write unit tests for GUI code
---------------------------------------------------
 + Refactor the data model code so that categories cache their lists of items
---------------------------------------------------
 + BUG: Back button is broken
    The browser's back button doesn't work after you click from 
    page to page in the navbar.
---------------------------------------------------
 + BUG: problems with HTML in text strings
    We still have some problems with handling text strings that 
    have HTML in them. If an item has an attribute value with some 
    HTML in it, like '<cite>', we incorrectly render it like 
    '& lt;cite& gt;' instead of '<cite>'
---------------------------------------------------
 + Editable Detail Plugin
    Make a new version of the current DetailPlugin.js.  The 
    current one just lets the user view the attribute values, 
    but we should make a better one that lets the user change 
    the values, and add new values, and add new ad-hoc attributes.
---------------------------------------------------
 + List/Detail Combo Plugin
    We could make a plugin that takes a list of items and
    displays them in a format like what you see in a mail
    reader or a news reader.  So you'd have some sort of
    table-view on top, with one item per row, and then a
    detail view below, to show more info about a single
    item.  We could copy a lot of code from the current
    TablePlugin.js and DetailPlugin.js, so it shouldn't be
    too hard to make a simple read-only version.
---------------------------------------------------
 + Table Plugin with ad-hoc attributes
    We should change the TablePlugin.js so that the user is
    able to add new columns on the fly, where each new
    column is for some new ad-hoc attribute.
---------------------------------------------------
 + NavBar view
    The NavBar should automatically update when the name of
    a page changes, or when a new page gets added. The user
    should be able to edit the NavBar itself to change the
    name of a page or to create a new page. The user should
    be able to drag the menu items up and down to re-order
    the list.  For a drag-and-drop list example, see:
    http://tool-man.org/examples/sorting.html
---------------------------------------------------
 + Be able to edit in outline mode
    In the outline plugin, add code to handle editing. The
    user should be able to add new items to an outline,
    chagne existing items, indent existing items, etc.
---------------------------------------------------
 + Have Table plugin group by category
    Make the Table plugin be about to to show groupings by
    category. For example, in a table that shows a list of
    cities, you might want to see them grouped by country.
---------------------------------------------------
 + Have Outline plugin group by category
    Make the Outline plugin be able to show groupings by
    category. For example, in an outline that shows a list of
    cities, you might want to see them grouped by country.
---------------------------------------------------
 + In Outline plugin, show detail locally
    When you click on the "more" link in an outline, the
    detail information should show up on the current page,
    within the current list item, rather than whisking you
    away to a completely separate item detail page.
---------------------------------------------------
 + Table Plugin column order
   Add 'Table' plugin controls for column re-arranging, 
   column hiding, etc.
---------------------------------------------------
 + Draft a Contributor Agreement
     We need to draft some sort of Contributor Agreement, like the Apache Contributor Agreement or the Python Contributor Agreement.
     See:
       http://www.apache.org/licenses/icla.txt
       http://www.python.org/psf/contrib-form.html
---------------------------------------------------
 + Move this task list from here into OpenRecord!
---------------------------------------------------
 + Consider moving from JavaDoc-style comments to reflection-based comments
---------------------------------------------------
 + Consider having a build system
    A build system could:
      * run unit tests
      * run JSLint on the code
      * compress the code by removing white space and comments
      * compress the code by copying everything into a single file
      * generate documentation
      * remove Util.assert() statements from the code
---------------------------------------------------
 + Skins/Themes/Chrome
    Make it possible for different web sites to each of their own
    logos, color-schemes, and branding.
---------------------------------------------------
 + search engine indexing
    Figure out how to make sure that search engines like
    Google are able to index all the "virtual" pages that 
    OpenRecord serves.
    I don't know just what's involved in making sure the search
    engines can index a page.  That's something I'll have to
    learn more about.  If I had to guess, I think we're going to
    have to do two thing: (1) make each page have it's own real
    URL, rather than using the #anchor tag scheme that
    OpenRecord is using now, and (2) have the server generate
    html pages that have all the content elements already in
    place, rather than relying on client JavaScript to do all
    the work.
---------------------------------------------------
 + Rationalize CSS style sheets
    Need to figure out a consistent "style" for using style sheets applicable
    to the way we architect our view widgets
---------------------------------------------------
 + Need to rationalize View api and document public api
    - wire up superview/subview after creation of subview
    - get rid of display()
    - rename refersh()
    - settle on standard constructor parameters
 Q: Should getListofContentItems() in superview be replaced by an argument into plugin's constructor
   Also, should plugin get a CSS class?
 Q: Should we decouple plugins from SectionView? in general, should we make objects less tightly coupled?
     Parent objects can know about children objects, but not vice versa.
---------------------------------------------------
 + Q: How exactly should entering new items UI work? Not clear when an item is saved
---------------------------------------------------
 + UI design/improvement for:
    - toggle for "edit"/"view" or "editable"/"locked"
    - adding a row to a table
    - deleting a row from a table
    - dragging rows up and down to re-order (conflict with sort columns?)
    - adding an entry to a table cell
    - replacing an entry with new text
    - adding a new column to a table
    - creating a new attribute
    - setting the expected data type of an attribute
    - doing data type validation on a new entry
    - adding a cell entry which is a reference to another item
    - creating a new category & putting things in categories
    - creating a new user account for yourself
    - logging in and logging out
    - creating a new page
    - creating a new section on a page
    - editing the query for a section
    - GUI feedback to show what text is editable?
---------------------------------------------------
 + talk about different designs for:
    - doing authentication (e.g. where to store passwords?)
    - representing queries (hold query matching criteria in normal attributes?)
    - ad-hoc queries as well as persistant queries?
    - bi-directional references as a type of entry?
---------------------------------------------------
 + Bug: "Waiting for localhost..."
    Load the demo_page.html page from http://localhost:...
    Go into Edit mode and change some entry.  The Firefox status 
    bar (bottom left) sometimes gets stuck saying 
    "Waiting for localhost...", even though it doesn't seem to
    be waiting
---------------------------------------------------
 + Bug: "Node was not found" exception
    Load the demo_page.html page from file:///...
    Go into Edit mode and change some entry.  
    You get an exception in EntryView.js:
      Util.handleError()
      uncaught exception: [Exception... "Node was not found"  
      code: "8" nsresult: "0x80530008 (NS_ERROR_DOM_NOT_FOUND_ERR)"  
      location: "file:///K:/www/htdocs/openrecord/demo/current/trunk/source/EntryView.js Line: 221"]
      line: 0
    
===========================       
Issues for post iteration#2
===========================       
+ How should we rename "VirtualServer"?
+ How should we interoperate with other repositories(openrecord + other sources of data)?
+ Should we rename "World"?
+ BUG: need to convert HTML entity codes back at client-server layer
+ BUG: Can't really create own plugins yet (e.g. UUID need to be assigned, plugin item created)
+ Q: Do we (and how) need a concept of focus for Views? Currently, only Text input and Textarea gets keyboard focus. We need it for table selections and possibly selecting "lozenges" (item references stored in the EntryView)